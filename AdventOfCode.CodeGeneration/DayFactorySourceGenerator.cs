using System.Collections.Generic;
using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace AdventOfCode.CodeGeneration
{
    [Generator]
    public class DayFactorySourceGenerator : ISourceGenerator
    {
        public void Initialize(GeneratorInitializationContext context)
        {
        }

        public void Execute(GeneratorExecutionContext context)
        {
            var type = context.Compilation.GetTypeByMetadataName("AdventOfCode.DayFactory");

            var classNames = GetDayClassNames(context)
                .Select(x => new
                {
                    Day = int.Parse(x.ClassName.Replace("Day", "")),
                    Year = GetYear(x)
                })
                .OrderBy(x => x.Year)
                .ThenBy(x => x.Day)
                .Select(x => $"({x.Year}, {x.Day}) => new AdventOfCode.Year{x.Year}.Day{x.Day}.Day{x.Day}(),");

            // Build up the source code
            var source = $@"// <auto-generated/>
namespace {type.ContainingNamespace.ToDisplayString()}
{{
    internal partial class {type.Name}
    {{
        public IDay GeneratedMethod(int year, int day)
            => (year, day) switch
            {{
                {string.Join("\r\n                ", classNames)}
                _ => throw new NotImplementedException(
                    $""Solution for day: {{day}} is not implemented"")
            }};
    }}
}}
";
            var typeName = type.Name;

            // Add the source code to the compilation
            context.AddSource($"{typeName}.g.cs", source);
        }

        private static int GetYear(Node node)
        {
            var namespaceYearPart = node.NamespaceName
                .Split('.')
                .FirstOrDefault(x => x.Contains("Year"))
                ?.Replace("Year", string.Empty) ?? "0";

            return int.Parse(namespaceYearPart);
        }

        private static IEnumerable<Node> GetDayClassNames(GeneratorExecutionContext context)
            => context.Compilation.SyntaxTrees
                .Where(x => x.GetText(context.CancellationToken).ToString().Contains("IDay"))
                .Select(day => day.GetRoot().DescendantNodes().OfType<ClassDeclarationSyntax>().FirstOrDefault())
                .Where(classDeclarationSyntax => classDeclarationSyntax != null)
                .Select(classDeclarationSyntax => new Node
                {
                    NamespaceName = GetNamespaceFrom(classDeclarationSyntax),
                    ClassName = classDeclarationSyntax.Identifier.ToString()
                })
                .Where(x => x.ClassName != "DayFactory");

        private static string GetNamespaceFrom(SyntaxNode s)
            => s.Parent switch
            {
                FileScopedNamespaceDeclarationSyntax namespaceDeclarationSyntax => namespaceDeclarationSyntax.Name.ToString(),
                NamespaceDeclarationSyntax namespaceDeclarationSyntax => namespaceDeclarationSyntax.Name.ToString(),
                null => string.Empty,
                _ => GetNamespaceFrom(s.Parent)
            };
    }
}